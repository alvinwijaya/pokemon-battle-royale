// Code generated by MockGen. DO NOT EDIT.
// Source: db/database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockDatabaseManager is a mock of DatabaseManager interface.
type MockDatabaseManager struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseManagerMockRecorder
}

// MockDatabaseManagerMockRecorder is the mock recorder for MockDatabaseManager.
type MockDatabaseManagerMockRecorder struct {
	mock *MockDatabaseManager
}

// NewMockDatabaseManager creates a new mock instance.
func NewMockDatabaseManager(ctrl *gomock.Controller) *MockDatabaseManager {
	mock := &MockDatabaseManager{ctrl: ctrl}
	mock.recorder = &MockDatabaseManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseManager) EXPECT() *MockDatabaseManagerMockRecorder {
	return m.recorder
}

// CommitTransaction mocks base method.
func (m *MockDatabaseManager) CommitTransaction(tx *gorm.DB) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction", tx)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockDatabaseManagerMockRecorder) CommitTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockDatabaseManager)(nil).CommitTransaction), tx)
}

// GetDB mocks base method.
func (m *MockDatabaseManager) GetDB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockDatabaseManagerMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockDatabaseManager)(nil).GetDB))
}

// Initialize mocks base method.
func (m *MockDatabaseManager) Initialize(dsn, connection string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", dsn, connection)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockDatabaseManagerMockRecorder) Initialize(dsn, connection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockDatabaseManager)(nil).Initialize), dsn, connection)
}

// RollbackTransaction mocks base method.
func (m *MockDatabaseManager) RollbackTransaction(tx *gorm.DB) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction", tx)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockDatabaseManagerMockRecorder) RollbackTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockDatabaseManager)(nil).RollbackTransaction), tx)
}

// StartTransaction mocks base method.
func (m *MockDatabaseManager) StartTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockDatabaseManagerMockRecorder) StartTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockDatabaseManager)(nil).StartTransaction))
}
