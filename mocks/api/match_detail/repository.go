// Code generated by MockGen. DO NOT EDIT.
// Source: api/match_detail/repository.go

// Package mock_match_detail is a generated GoMock package.
package mock_match_detail

import (
	reflect "reflect"

	match_detail "github.com/alvinwijaya/pokemon-battle-royale/model/match_detail"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BulkStore mocks base method.
func (m *MockRepository) BulkStore(db *gorm.DB, data *[]match_detail.MatchDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkStore", db, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkStore indicates an expected call of BulkStore.
func (mr *MockRepositoryMockRecorder) BulkStore(db, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkStore", reflect.TypeOf((*MockRepository)(nil).BulkStore), db, data)
}

// Delete mocks base method.
func (m *MockRepository) Delete(db *gorm.DB, data *match_detail.MatchDetail) (*match_detail.MatchDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", db, data)
	ret0, _ := ret[0].(*match_detail.MatchDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(db, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), db, data)
}

// GetOne mocks base method.
func (m *MockRepository) GetOne(db *gorm.DB, q map[string]interface{}) (*match_detail.MatchDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", db, q)
	ret0, _ := ret[0].(*match_detail.MatchDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockRepositoryMockRecorder) GetOne(db, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockRepository)(nil).GetOne), db, q)
}
