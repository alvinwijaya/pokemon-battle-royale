// Code generated by MockGen. DO NOT EDIT.
// Source: api/match/repository.go

// Package mock_match is a generated GoMock package.
package mock_match

import (
	reflect "reflect"

	filter "github.com/alvinwijaya/pokemon-battle-royale/api/match/filter"
	match "github.com/alvinwijaya/pokemon-battle-royale/model/match"
	pagination_model "github.com/alvinwijaya/pokemon-battle-royale/model/pagination_model"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAllInPagination mocks base method.
func (m *MockRepository) GetAllInPagination(db *gorm.DB, paging pagination_model.Paging, f *filter.GetAllInPaginationFilter) (*pagination_model.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInPagination", db, paging, f)
	ret0, _ := ret[0].(*pagination_model.PaginationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllInPagination indicates an expected call of GetAllInPagination.
func (mr *MockRepositoryMockRecorder) GetAllInPagination(db, paging, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInPagination", reflect.TypeOf((*MockRepository)(nil).GetAllInPagination), db, paging, f)
}

// Store mocks base method.
func (m *MockRepository) Store(db *gorm.DB, data match.Match) (*match.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", db, data)
	ret0, _ := ret[0].(*match.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockRepositoryMockRecorder) Store(db, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockRepository)(nil).Store), db, data)
}
