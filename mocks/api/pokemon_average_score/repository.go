// Code generated by MockGen. DO NOT EDIT.
// Source: api/pokemon_average_score/repository.go

// Package mock_pokemon_average_score is a generated GoMock package.
package mock_pokemon_average_score

import (
	reflect "reflect"

	pagination_model "github.com/alvinwijaya/pokemon-battle-royale/model/pagination_model"
	pokemon_average_score "github.com/alvinwijaya/pokemon-battle-royale/model/pokemon_average_score"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAllInPagination mocks base method.
func (m *MockRepository) GetAllInPagination(db *gorm.DB, paging pagination_model.Paging) (*pagination_model.PaginationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInPagination", db, paging)
	ret0, _ := ret[0].(*pagination_model.PaginationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllInPagination indicates an expected call of GetAllInPagination.
func (mr *MockRepositoryMockRecorder) GetAllInPagination(db, paging interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInPagination", reflect.TypeOf((*MockRepository)(nil).GetAllInPagination), db, paging)
}

// GetByPokemonIDs mocks base method.
func (m *MockRepository) GetByPokemonIDs(db *gorm.DB, pokemonIDs []uint64) (*[]pokemon_average_score.PokemonAverageScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPokemonIDs", db, pokemonIDs)
	ret0, _ := ret[0].(*[]pokemon_average_score.PokemonAverageScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPokemonIDs indicates an expected call of GetByPokemonIDs.
func (mr *MockRepositoryMockRecorder) GetByPokemonIDs(db, pokemonIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPokemonIDs", reflect.TypeOf((*MockRepository)(nil).GetByPokemonIDs), db, pokemonIDs)
}

// GetOne mocks base method.
func (m *MockRepository) GetOne(db *gorm.DB, q map[string]interface{}) (*pokemon_average_score.PokemonAverageScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", db, q)
	ret0, _ := ret[0].(*pokemon_average_score.PokemonAverageScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockRepositoryMockRecorder) GetOne(db, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockRepository)(nil).GetOne), db, q)
}

// Store mocks base method.
func (m *MockRepository) Store(db *gorm.DB, data pokemon_average_score.PokemonAverageScore) (*pokemon_average_score.PokemonAverageScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", db, data)
	ret0, _ := ret[0].(*pokemon_average_score.PokemonAverageScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockRepositoryMockRecorder) Store(db, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockRepository)(nil).Store), db, data)
}

// UpdateByID mocks base method.
func (m *MockRepository) UpdateByID(db *gorm.DB, id uint64, p map[string]interface{}) (*pokemon_average_score.PokemonAverageScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", db, id, p)
	ret0, _ := ret[0].(*pokemon_average_score.PokemonAverageScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockRepositoryMockRecorder) UpdateByID(db, id, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockRepository)(nil).UpdateByID), db, id, p)
}
